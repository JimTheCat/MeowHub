-- Table: user_roles
CREATE TABLE user_roles
(
    id             NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name           VARCHAR2(30) NOT NULL,
    description    VARCHAR2(250),
    create_user_id NUMBER       NOT NULL,
    create_date    TIMESTAMP    NOT NULL,
    mod_user_id    NUMBER,
    mod_date       TIMESTAMP
);

-- Table: user_status (renamed from status)
CREATE TABLE user_status
(
    id             NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name           VARCHAR2(50) NOT NULL,
    description    VARCHAR2(250),
    create_user_id NUMBER       NOT NULL,
    create_date    TIMESTAMP    NOT NULL,
    mod_user_id    NUMBER,
    mod_date       TIMESTAMP
);

-- Table: images
CREATE TABLE images
(
    id             NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    image          BLOB      NOT NULL,
    create_user_id NUMBER    NOT NULL,
    create_date    TIMESTAMP NOT NULL,
    mod_user_id    NUMBER,
    mod_date       TIMESTAMP
);

-- Table: groups
CREATE TABLE groups
(
    id             NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name           VARCHAR2(25) NOT NULL,
    description    VARCHAR2(250),
    images_id      NUMBER,
    create_user_id NUMBER       NOT NULL,
    create_date    TIMESTAMP    NOT NULL,
    mod_user_id    NUMBER,
    mod_date       TIMESTAMP,
    CONSTRAINT fk_images_id FOREIGN KEY (images_id) REFERENCES images (id)
);

-- Table: tags
CREATE TABLE tags
(
    id             NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name           VARCHAR2(50) NOT NULL,
    description    VARCHAR2(250),
    create_user_id NUMBER       NOT NULL,
    create_date    TIMESTAMP    NOT NULL,
    mod_user_id    NUMBER,
    mod_date       TIMESTAMP,
    CONSTRAINT tags_name_uq UNIQUE (name)
);

-- Table: users
CREATE TABLE users
(
    id             NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    login          VARCHAR2(10) NOT NULL,
    name           VARCHAR2(20) NOT NULL,
    second_name    VARCHAR2(20),
    lastname       VARCHAR2(20) NOT NULL,
    password       VARCHAR2(40) NOT NULL,
    salt           VARCHAR2(40) NOT NULL,
    refresh_token  NUMBER,
    role           NUMBER       NOT NULL,
    birthdate      DATE         NOT NULL,
    email          VARCHAR2(40) NOT NULL,
    status         NUMBER       NOT NULL,
    create_user_id NUMBER       NOT NULL,
    create_date    TIMESTAMP    NOT NULL,
    mod_user_id    NUMBER,
    mod_date       TIMESTAMP,
    CONSTRAINT users_login_uq UNIQUE (login),
    CONSTRAINT users_email_uq UNIQUE (email),
    CONSTRAINT fk_role FOREIGN KEY (role) REFERENCES user_roles (id),
    CONSTRAINT fk_status FOREIGN KEY (status) REFERENCES user_status (id)
);

-- Table: posts
CREATE TABLE posts
(
    id             NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    content        VARCHAR2(5000) NOT NULL,
    post_date      NUMBER         NOT NULL,
    users_id       NUMBER         NOT NULL,
    create_user_id NUMBER         NOT NULL,
    create_date    TIMESTAMP      NOT NULL,
    mod_user_id    NUMBER,
    mod_date       TIMESTAMP,
    CONSTRAINT fk_users_id FOREIGN KEY (users_id) REFERENCES users (id)
);

-- Table: comments
CREATE TABLE comments
(
    id             NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    comment        VARCHAR2(2000) NOT NULL,
    users_id       NUMBER         NOT NULL,
    posts_id       NUMBER         NOT NULL,
    create_user_id NUMBER         NOT NULL,
    create_date    TIMESTAMP      NOT NULL,
    mod_user_id    NUMBER,
    mod_date       TIMESTAMP,
    CONSTRAINT fk_comments_users FOREIGN KEY (users_id) REFERENCES users (id),
    CONSTRAINT fk_comments_posts FOREIGN KEY (posts_id) REFERENCES posts (id)
);

-- Table: group_users
CREATE TABLE group_users
(
    groups_id      NUMBER    NOT NULL,
    users_id       NUMBER    NOT NULL,
    create_user_id NUMBER    NOT NULL,
    create_date    TIMESTAMP NOT NULL,
    mod_user_id    NUMBER,
    mod_date       TIMESTAMP,
    CONSTRAINT group_users_pk PRIMARY KEY (groups_id, users_id),
    CONSTRAINT fk_group_users_groups FOREIGN KEY (groups_id) REFERENCES groups (id),
    CONSTRAINT fk_group_users_users FOREIGN KEY (users_id) REFERENCES users
);
